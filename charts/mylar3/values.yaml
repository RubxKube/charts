define: &containerPort 8090


common:
  name: "mylar3"

  service:
    type: ClusterIP
    enabled: true
    servicePort: *containerPort
    containerPort: *containerPort
    extraLabels: {}

  deployment:
    memoryRequest: null
    cpuRequest: null
    memoryLimit: null
    cpuLimit: null
    port: *containerPort
    minReplicas: 1
    args: []
    strategy:
      type: Recreate
      # rollingUpdate:
      # maxUnavailable: 25%
      # maxSurge: 25%
    initContainers: []
    emptyDir: []
      # - name: "cache"
      #   containerMount: "/cache"

  image:
    repositorySettings:
      isPrivate: false
      secretName: null
    repository: lscr.io/linuxserver/mylar3
    tag: 2021.12.13
    pullPolicy: Always

  ingress:
    enabled: false
    hostName: toto.lan
    extraLabels: {}
    annotations: {}
    tls:
      enabled: true
      secretName: ""
    # For Ingress CRD
    ingressClassName: istio

  # env variables
  variables:
    configMap:
      existingConfigMap: []
        # - "existing-configmap-name"
        # - "another-existing-configmap-name"
    secret:
      data: {}
      # user: "username"
      # password: "hugepassword"
      existingSecret: []
        # - name: "existing-secret-name"
        #   key: "key"
        #   envName: "ENV_NAME"
        # - name: another-existing-secret
        #   key: key2
        #   envName: ENV2_NAME
      extraExistingSecrets: []
        # - name: "existing-secret-name"
        #   key: "key"
        #   envName: "ENV_NAME"
        # - name: another-existing-secret
        #   key: key2
        #   envName: ENV2_NAME
    nonSecret:
      TZ: "Europe/Paris"
      PUID: 1000
      PGID: 1000
  #    author: name
  #    app: 1

  # horizontal autoscaler
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    avgCpuUtilization: 50

  # startupProbe
  startupProbeEnabled: false
  startupProbe: {}
  # httpGet:
  #   path: "/"
  #   port: *containerPort
  # periodSeconds: 10
  # failureThreshold: 20
  # timeoutSeconds: 1

  # readinessProbe
  readinessProbeEnabled: false
  readinessProbe: {}
  # httpGet:
  #   path: "/"
  #   port: *containerPort
  # initialDelaySeconds: 20
  # periodSeconds: 30
  # failureThreshold: 2
  # timeoutSeconds: 3

  # livenessProbe
  livenessProbeEnabled: false
  livenessProbe: {}
  # enabled: true
  # httpGet:
  #   path: "/"
  #   port: *containerPort
  # initialDelaySeconds: 20
  # periodSeconds: 60
  # failureThreshold: 1
  # timeoutSeconds: 3

  persistence:
    enabled: true
    volumes:
      - name: config
        size: 2Gi
        containerMount: "/config"
      - name: comics
        size: 5Gi
        containerMount: "/comics"
      - name: downloads
        size: 2Gi
        containerMount: "/downloads"
    extraVolumes: []
    # - name: "config"
    #   storageClassName: "longhorn"
    #   size: "5Gi"
    #   pvcClaim: ""
    #   containerMount: "/config"

  tests:
    classicHttp: # default helm test method
      enabled: false
    curlHostHeader: # curl using ingress.hostName as Host in header
      enabled: false
      path: ""
